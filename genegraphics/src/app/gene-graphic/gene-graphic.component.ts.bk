import { Component, Input, OnInit } from '@angular/core';
import { DatabaseService } from '../database.service';
import { GeneGraphic, Region, Feature } from '../models';
import { EditorService } from '../editor.service';
import { liveQuery } from 'dexie';

@Component({
  selector: 'app-gene-graphic',
  templateUrl: './gene-graphic.component.svg',
  styleUrls: ['./gene-graphic.component.scss']
})
export class GeneGraphicComponent implements OnInit {
  @Input() geneGraphic!: GeneGraphic;
  regions: Region[] = [];
  features!: {
    RegionId: number,
    features: Feature[]
  };
  scale_ratio: number = 0;
  svg_height: number = 0;

  constructor(private db: DatabaseService, private editorService: EditorService){}

  getScalePoints(){
    let width = 1000*this.scale_ratio;
    return`10,10,10,25,${width},25,${width},10`;
  }
  
  getScaleTransform(){
    return `translate(0,${this.getScaleY()})`;
  }

  getScaleY(){
    let y = 5;
    if (this.geneGraphic.titleProps.show){
      y+=this.geneGraphic.titleProps.fontSize;
    }
    return y;
  }

  getSvgHeight(){
    let header_height = this.getRegionGroupY();
    let last_region = this.regions.at(-1);
    if (last_region){
      let regions_height = this.getRegionY(last_region.position+1);
      return header_height + regions_height;
    } else {
      return header_height;
    }
  }

  getRegionGroupY(){
    let y = this.getScaleY();
    if (this.geneGraphic.showScale) y += 50;
    return y;
  }

  getRegionGroupTransform(){
    return `translate(0,${this.getRegionGroupY()})`;
  }

  getRegionTransform(region: Region){
    let y = this.getRegionY(region.position);
    return `translate(0,${y})`;
  }

  getRegionY(region_pos: number){
    let y = 0;
    let prev_position = region_pos - 1;
    if(this.regions.length>=prev_position && prev_position!=0){
      for(let i=0; i<prev_position; i++){
        let name_height = this.regions[i].nameProps.show?
          this.regions[i].nameProps.fontSize : 0;
        let lanes = this.geneGraphic.multilane ? this.regions[i].lanes : 1;
        y += name_height;
        y += (this.geneGraphic.featureHeight)*(lanes+1);
      }
    }
    return y;
  }

  setScaleRatio(){
    let max_region_size = Math.max(...this.regions.map(region=>region.size));
    this.scale_ratio = this.geneGraphic.width/max_region_size;
  }
  
  onClick(e: any){
    this.editorService.deselectAll();
  }

  ngOnInit(): void {
    if (this.geneGraphic.id){
      liveQuery(()=>{
        return this.db.regions.where({geneGraphicId: this.geneGraphic.id}).sortBy('position');
      }).subscribe((regions: Region[])=>{
          console.log("region updated");
          this.regions = regions;
          this.setScaleRatio();
      });
    }
  }
}
